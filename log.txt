# Cours 1 (14.09.2020)
1. Mise en place du raspberry pi 4b

    J'ai pour ma part suivi ce tutoriel pour mettre en place le raspberry pi: www.okdo.com/getstarted

    1.1 Déballage raspberry pi 4b
    1.2 Collage des heatsinks sur le raspberry
    1.3 Insertion du raspberry dans son boitier
    1.4 Insertion de la carte micro sd dans le raspberry


2. Installation de l'OS xBian sur la carte SD du raspberry

    Le site web https://xbian.org/getxbian/ où j'ai téléchargé l'image d'xBian.
    J'ai du aller chercher sur internet un logiciel permettant de flasher l'image téléchargée sur ma carte micro SD, 
    j'ai utilisé raspberry pi imager.
   
    2.1 Téléchargement de l'OS xbian depuis le site https://xbian.org/getxbian/ (version Raspberry Pi 4B).
    2.2 Flash de l'image xbian sur la carte micro sd avec raspberry pi imager 
        (commande 'dd' pour le faire manuellement sans soft. sur un sys. unix).
    2.3 Branchement du cable hdmi dans le port 'hdmi 0' du raspberry et démarrage de celui-ci.
    2.4 Boot d'xBian/Kodi 18.8
    2.5 Exécution des commandes 'apt-get update' et 'apt-get upgrade' pour mettre à jour les paquets.
    2.6 Changement du mdp du compte root pour plus de droits avec la commande 'sudo passwd root' 
        (l'utilisateur xBian fait partie du groupe sudo donc j'ai le droit)
    2.7 Mettre l'heure système sur la zone GMT de Bruxelles: commande 'ln -sf /usr/share/zoneinfo/Europe/Brussels /etc/localtime'
        (https://www.systutorials.com/linux-setting-date-time-and-timezone/)



3. Connexion du pc hôte au raspberry avec un cable ethernet via le protocole SSH

    J'ai, dans un premier temps, su me connecter en SSH à mon raspberry via Wifi par le biais dun réseau local de mon smartphone en suivant le guide
    de ce site (https://docs.dataplicity.com/docs/get-pi-connected-to-the-internet).
    
    3.1 J'ai installé par la suite le service SSH sur mon raspberry avec la commande 'sudo apt-get install ssh'
    3.2 et la commande 'sudo service ssh restart' pour démarrer/redémarrer le service
        La partie suivante décrit comme se connecter depuis un terminal d'un systeme unix au raspberry via le protocole SSH
    3.3 Dans le terminal distant, taper la commande 'ssh xbian@addrIpDuRaspberry' ("xbian" etant le nom de l'utilisateur)

    Après avoir réussi à me connecter via le protocole SSh en Wifi, j'ai tenté de le faire via Ethernet.
    3.4 Je suis allé dans le menu paramètres > xBian > System de la GUI Kodi
    3.5 Changé l''interface to configure' sur 'eth0' pour séléctionner la carte réseau ethernet
    3.6 Mettre 'Type' sur 'Static'
    3.7 hardcodé 'IP Adress' avec la valeur '192.168.5.71'
    3.8 quitter le menu en sauvant les changements.

    Dès lors, il est possible de se connecter depuis une machine unix qui a une carte réseau qui est directement connectée via un cable ethernet 
    au raspberry via la commande 'ssh xbian@192.168.5.71'.
    Attention! L'addresse IP de la machine hote doit avoir une adresse IP qui fasse partie du même réseau que le raspberry.
    Il faut alors changer le fichier interfaces du dossier /etc/network/ de la machine hote pour configurer cela.
    Comme je n'ai pas les droits pour changer ce fichier quand je suis sur une machine de l'université 
    et que par la suite cela m'aurait ammené façe à d'autres problème de droits, j'ai depuis ce moment là
    utilisé mon PC portable windows pour me connecter en SSH à mon raspberry via le logiciel putty.
    J'ai donc configuré les paramètres de ma carte eth0 de mon windows pour me connecter via mon cable ethernet à mon raspberry.
    Adresse IP de mon windows= 192.168.5.70.

    3.9 Création d'une clé privée/publique SSH pour se connecter en tant que root sur mon raspberry.
    3.9.1 Commande 'ssh-keygen -t rsa -b 4096' pour préciser de créer une clé suivant l'algo RSA avec une taille de 4096.
    3.9.2 Les 2 fichiers qui viennent d'être crées doivent aller dans des répertoires différents.
            le fichier avec l'extension '.pub' doit être renommé en 'authorized_keys' et être placé dans /root/.ssh/
            L'autre fichier est la clé privée qui elle doit être utilisé pour se connecter à distance depuis ma machine windows via putty
            Pour le transfert du fichier, j'utilise le soft. WinSCP avec lequel je me connecte via le compte xBian 
            dont je connais le mot de passe 'raspberry'. 
            Dès lors je copie la clé privée pour le mettre dans un répertoire de mon PC Windows.
            Dès maintenant je peux me reconnecter à mon raspberry en tant que root via Putty ou WinSCP en précisant la clé privée.
    

4. Enlever le bouton 'Exit' du menu paramètres de la GUI Kodi

    Après plusieurs recherches sur internet comment modifier l'affichage de la GUI Kodi, 
    j'ai pu comprendre le fonctionnement interne de celui-ci avec les add-ons et plus spécifiquement l'add-on skin.estuary 
    qui joue le rôle d'add-on d'affichage (ou theme) pour Kodi.

    4.1 Pour enlever le bouton 'Exit' il faut aller dans le répertoire /usr/local/share/kodi/addons/skin.estuary/xml 
        et éditer le fichier DialogButtonMenu.xml. (avant toute manipulation, j'ai sauvegardé l'entièreté de l'add-on pour avoir un backup)
    4.2 Il faut ensuite remplacer la ligne '<visible>System.ShowExitButton</visible>' par '<visible>no</visible>'.
        (https://iwf1.com/how-to-remove-power-off-system-from-kodis-shutdown-menu)


# Cours 2 (21.09.2020)
1. Création d'un script qui s'exécutera tous les jours entre 3 heures et 4 heures du matin qui éxécute le script situé sur le répository gitlab du professeur puis qui push le résultat d'affichage et le concatène dans le fichier workload.log du dossier logs/

    Pour la fonctionnalité de s'éxécuter tous les jours entre 3 heures et 4 heures du matin, 
    le professeur m'a indiqué que cron est la commande qui me permet d'automatiser cela.
    J'ai donc fait quelques recherches sur internet pour apprendre son fonctionnement.
    (https://doc.ubuntu-fr.org/cron)
    La suite concerne un script situé sur un repository de Gitlab. J'ai du par la suite me re-familiariser 
    avec les commandes git et donc j'ai du installer le paquet git sur mon raspberry.

    Le script du professeur ne fait qu'afficher dans le fichier workload.log la date et l'heure actuelle 
    avec en plus un message personnalisé dont le contenu doit être défini 
    dans une variable initialisée dans le menu de la commande 'crontab -e'.

    1.1 Création du dossier 'scripts' dans '~/'
    1.2 Création du dossier 'git_scripts' dans '~/scripts/'
    1.3 Clone du repository du professeur
    
    Dès ce moment j'ai d'abord essayé de créer un script par moi-même et de le faire éxécuter toutes les minutes par cron.
    Mon script avait le contenu suivant:
        #!/bin/bash
        echo 'exécution de la commande #ls -l'
        ls -l

    J'ai ensuite modifié les droits d'éxécution avec la commande 'chmod +x cron.sh'.
    La ligne à ajouter dans le contenu affiché après l'éxécution de la commande 'crontab -e'
    était la suivante : * * * * * /root/scripts/cron.sh >> /root/scripts/cron.log 
    Cette ligne éxécutera mon script toutes les minutes et redirigera les erreurs vers le fichier 'cron.log'.
    Pour débugger une commande dans cron qui ne donne aucun résultat, on peut la débugger 
    en terminant la commande par: 'commande > ~/err.txt 2>&1'.

    Le problème suivant est d'éxéuter une commande git pour un répertoire qui n'est pas celui dans lequel le terminal est. 
    Après avoir cherché comme éxécuter une commande Git dans un répertoire différent j'ai trouvé le paramètre '-C' qui résout ce problème.
    Exemple: 'git -C /root/scripts/git_scripts/pje-f-raspberry-pi-4b/ pull'

    Le problème suivant c'est qu'à chaque pull/commit/push, on me demandera mon username et mon password. 
    Ce problème peut être évité avec la connexion au repository via une clé SSH. 
    J'ai déjà essayé de remplacer la méthode http par ssh mais j'ai finalement opté pour la solution http 
    car pour la connexion ssh il fallait reset le VPN pour l'université toutes les 8 heures.
    Pour finalement garder mes 'credidentials' dans mon système, j'ai exécuté la commande 'git config --global credential.helper store'
    qui me demandera pour la dernière fois mon username et password.
    (https://stackoverflow.com/questions/35942754/how-to-save-username-and-password-in-git-gitextension)

    1.4 ligne à ajouter après l'éxécution de la commande 'crontab -e' :
    1 3 * * * git -C $CORRECT_GIT_PATH checkout pmichiels && git -C $CORRECT_GIT_PATH pull && bash $CORRECT_GIT_PATH/runit/runit.sh && git -C $CORRECT_GIT_PATH add . && git -C $CORRECT_GIT_PATH commit -m "commit `date +\%d-\%m-\%Y` - `date +\%H:\%M:\%S` michiels" && git -C $CORRECT_GIT_PATH push origin pmichiels

    Où le contenu de $CORRECT_GIT_PATH=/root/scripts/git_scripts/pje-f et rpi_name=michiels_raspberry_4b 
        (rpi_name est une variable nécessaire pour le script à éxécuter)

    Pour expliquer, cron va éxécuter à 3 heures du matin et 1 minute un checkout sur la branche pmichiels. 
    Si cela réussit, il pull le repository pour vérifier s'il faut mettre à jour.
    Il éxécute le script suivant:
        #!/bin/bash
        sleepTime=$(($RANDOM % 3600))
        path_pje_f=/root/scripts/git_scripts/pje-f
        sleep $sleepTime
        echo "$(date) - alive $rpi_name" >> $path_pje_f/logs/workload.log

    C'est dans ce script qu'il va endormir le système pendant un moment aléatoire entre 0 et 3600 secondes.
    C'est ce qui permet de push entre 3 heures et 4 heures du matin de façon aléatoire.

    Ensuite, cron va ajouter les changements faits (le script a modifié le fichier 'workload.log').
    Il commit avec comme message la date et l'heure du commit.
    Puis push sur le repository.


2. Création d'un script qui s'exécute toutes les minutes et concatène le résultat d'affichage 
    dans le fichier status.log qui lui ne sera pas déposé sur un repository mais restera sur le raspberry.
    Ce script doit afficher la date, la température, la fréquence et le voltage du cpu et le 'Kodi status'.

    2.1 Création du script diag.sh dans le dossier '~/scripts/'
    2.2 Le script crée aura le contenu suivant :
        #!/bin/bash
        date=$(echo `date +\%d-\%m-\%Y` `date +\%H:\%M`)
        temp=$(sensors | grep -oP '(?<=temp1:).*')
        #freq=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq)
        freq=$(vcgencmd measure_clock arm)
        volt=$(vcgencmd measure_volts)
        kodi_status='n/a'
        echo ${date}\;${temp}\;${freq}\;${volt}\;${kodi_status}

    Pour la température, j'ai du installer un paquet en plus 'lm-sensors'.
    J'ai du ensuite retirer une chaine de caractère représentant la température de l'output via la commande grep.
    (https://unix.stackexchange.com/questions/393948/how-to-search-and-extract-string-from-command-output)
    
    La fréquence et le voltage peuvent aussi s'obtenir de la manière suivante :
        freq=$(vcgencmd measure_clock arm)
        volt=$(vcgencmd measure_volts)

3. Connecter le disque dur et y créer les dossiers 'Films' et 'Series'
    La commande 'lsblk' permet de voir si le disque dur est monté ou non.
    
    3.1 Se déplacer dans le dossier '/media/usbX' (X représente un chiffre)
    3.2 Créer les dossiers 'Films' et 'Series' => 'mkdir Films'
    
    Info utile: 
    Commande pour démonter le disque 'sda1' => #umount -l /dev/sda1 (vérifier avant si c'est bien 'sda1' avec la commande 'lsblk')

4. Installer les paquets 'ffmpeg', 'tar', 'youtube-dl', 'Git' et 'wGet' sur le raspberry.
    Lors de ce cours, le professeur m'a demandé d'installer les paquets suivants :
    tar, ffmpeg, youtube-dl, Git, wGet.
    Leur installation a consisté à les installer via la commande 'apt install <paquet>'


# Cours 3 (28.09.2020)
1. Exécuter le script du professeur pour récuperer les Films et Séries puis les copier dans le disque dur dans leur répertoire respectifs.

    J'ai eu des problèmes de path lors de l'éxécution du script du professeur, j'ai alors éxécuté ligne par ligne manuellement.
    J'ai donc téléchargé le fichier .tar puis j'ai décompressé le fichier sur le disque dur à l'emplacement /media/usb0/
    ce qui m'a donné un nouveau fichier 'Films' avec tout le contenu nécessaire.    
    J'ai fait la même démarche pour les séries.


2. Trouver un moyen de télécharger les trailers (bande d'annonce) des films et séries.

    J'ai appris que kodi peut repérer le trailer localement si celui-ci à son nom qui se termine par '*-trailer.extension'
    (https://forum.kodi.tv/showthread.php?tid=164443)
    Dans un premier temps j'ai rédigé le script suivant: (voir scripts/trailerScriptUsingYTAPI.sh dans ce même repository)
    Pour résumer, ce script va récuperer un résultat json qui contient les données (venant de l'API youtube) pour chaque film du dossier Films.
    Il va reprendre le nom du dossier du film pour le mettre en tant que paramètre dans l'URL 
    pour ensuite récupérer sous format json la réponse de l'API Youtube. 
    Il est possible que le quota de recherche ai dépassé la limite de requetes de l'API Youtube. 
    Dès lors, lorsque ma réponse json a un error code '403' je dois post-poser le téléchargement 24h plus tard.
    Je sauve donc la dernière tentative (cad. le nom du dernier film sur lequel je voulais télécharger la bande d'annonce) à la fin
    d'un fichier.
    Pour reprendre à partir de ce moment là, je reprends la liste des noms de dossiers pour enlever ce qui précède le dernier film téléchargé
    et j'obtiens un tableau qui contiens plus que le films dont le trailer est manquant.

    'jq' est la commande qui me permet de reprendre de l'information à partir d'un contenu json.

    J'ai eu un soucis de téléchargement avec la commande 'youtube dl'. 
    En effet, la version installée via 'apt' n'est plus valide, j'ai du alors  télécharger depuis le dépot officiel.
    (https://doc.ubuntu-fr.org/youtube-dl)

    Pour pouvoir utiliser l'API Youtube, j'ai du créer un projet dans google cloud 
    ce qui m'a permit de créer une clé API qui m'a permis d'utiliser l'API.

    Après discussion avec le professeur, j'aurais pu faire plus simple. 
    Il n'est pas obligatoire de passer par une API, les liens de bande d'annonce se trouvent deja dans le fichier .nfo du dossier du film.

    J'ai donc par la suite adapté le code de mon script (dossier scripts/trailerScript.sh de ce même repository).
    Pour cela j'ai du faire en sorte de pouvoir récupérer une chane de caractère dans un fichier selon un certain pattern.
    (https://stackoverflow.com/questions/21077882/pattern-to-get-string-between-two-specific-words-characters-using-grep)

    Concernant les séries, il n'y a tout simplement pas d'url vers une video youtube pour télécharger le trailer. 
    Je n'ai donc pas pu télécharger les trailes des séries.



- modifier l'interface, coté navigation (partie gauche)
il faut faire en sorte qu'il n'y a plus que les catégories film, series, TV et météo restent (supprimer ou créer les catégories manquantes)
il faut en fait avoir un ou plusieurs fichiers xml (qui sont sur un repository) qui représentent le menu qu'on a envie d'avoir et un script qui git pull et remplace les fichiers de l'ancien menu et les replacent avec les fichiers xml du repository.

Pour faciliter le raffraichissement de la page, on utilise des raccourcis inscrits dans le fichier keymap.xml, (à créer et à mettre dans /home/xbian/.kodi/userdata/keymaps)
https://kodi.wiki/view/Archive:Foundation



Pour afficher plus que les catégories film, series, TV et météo, il faut aller dans le fichier Home.xml (/usr/local/share/kodi/addons/skin.estuary/xml/Home.xml) et mettre en commentaire les balises <item> et leur contenu à partir de la ligne avec "<control type="fixedlist" id="9000">"
(voir point 6 - https://kodi.wiki/view/Estuary_Modification)

- Il faut ajouter un addon pour la catégorie TV addon franceTV 
Il faut donc le télécharger depuis kodi et son dossier dans le système unix se trouve à: /home/xbian/.kodi/addons/plugin.video.francetv
(après l'exercice, j'ai appris qu'il m'est impossible de transferer l'addon france tv de la catégorie 'video' vers la catégorie 'TV')



dans chaque dossier on a un fichier mkv de taille 0 octet
un fichier nfo qui faudra mettre a jour qui contient ttes les infos du film
*-poster.jpg qui est la jaquette
*-fontart.jpg qui est l'image de fond
*actors ???



Cours 4 (05.10.2020)
terminer le cours 3
- afficher les catégories film, series, TV et météo (TV devient en fait la catégorie favoris et il aura le logo de la cat. TV et toutes les chaines du plugin franceTV)

faire de la surveillance video et faire en sorte que la caméra s'active et enregistre des qu'il y a du mouvement.
Possibilité de voir en direct depuis la catégorie 'favorites'
https://opendomotech.com/videosurveillance-avec-raspberry-pi-et-motion/







